trigger:
- main

parameters:
  - name: environment
    displayName: "Select Environment"
    type: string
    default: "dev"
    values:
      - dev
      - qa
      - uat
      - prod

variables:
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  APP_NAME: 'myappmulti'
  manifestsPath: '$(Build.SourcesDirectory)/manifests/'
  IMAGE_REPOSITORY: 'myappmulti'

stages:
- stage: BuildAndPush
  displayName: Build and Push Docker Image
  jobs:
  - job: Build
    displayName: Build and Push Docker Image to ACR
    pool: default
    variables:
      - ${{ if eq(parameters.environment, 'dev') }}:
        - group: dev-variables
      - ${{ if eq(parameters.environment, 'qa') }}:
        - group: qa-variables
      - ${{ if eq(parameters.environment, 'uat') }}:
        - group: uat-variables
      - ${{ if eq(parameters.environment, 'prod') }}:
        - group: prod-variables
    steps:
    - task: Docker@2
      displayName: Build and Push Docker Image
      inputs:
        command: buildAndPush
        repository: $(CONTAINER_REGISTRY)/$(IMAGE_REPOSITORY)  # Using CONTAINER_REGISTRY variable
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)  # Service connection name
        tags: |
          $(tag)

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Kubernetes Manifests'
      inputs:
        PathtoPublish: '$(manifestsPath)'
        ArtifactName: 'kube-manifest'
        publishLocation: 'Container'

    - task: Bash@3
      displayName: Replace placeholders in deployment.yaml
      inputs:
        targetType: 'inline'
        script: |
         echo "APP_NAME is: $(APP_NAME)"
         sed -i "s|{{APP_NAME}}|$(APP_NAME)|g" $(Build.SourcesDirectory)/manifests/deployment.yaml
         sed -i "s|{{ENVIRONMENT}}|$(ENVIRONMENT)|g" $(Build.SourcesDirectory)/manifests/deployment.yaml
         sed -i "s|APP_IMAGE_NAME|$(CONTAINER_REGISTRY)/$(APP_NAME):$(tag)|g" $(Build.SourcesDirectory)/manifests/deployment.yaml

    - task: Bash@3
      displayName: Debug Deployment YAML deployment.yaml
      inputs:
        targetType: 'inline'
        script: |
         cat $(Build.SourcesDirectory)/manifests/deployment.yaml

- stage: DeployToAKS
  displayName: Deploy to AKS (${{ parameters.environment }})
  dependsOn: BuildAndPush
  jobs:
  - job: Deploy
    displayName: Deploy to AKS using Kubernetes Manifests
    pool: default
    variables:
      - ${{ if eq(parameters.environment, 'dev') }}:
        - group: dev-variables
      - ${{ if eq(parameters.environment, 'qa') }}:
        - group: qa-variables
      - ${{ if eq(parameters.environment, 'uat') }}:
        - group: uat-variables
      - ${{ if eq(parameters.environment, 'prod') }}:
        - group: prod-variables
    steps:
    - checkout: self

    - task: KubernetesManifest@1
      displayName: Deploy to AKS
      inputs:
        action: 'deploy'
        connectionType: 'kubernetesServiceConnection'
        kubernetesServiceConnection: $(K8S_SERVICE_CONNECTION)  
        namespace: $(ENVIRONMENT)  
        manifests: |
          $(Build.SourcesDirectory)/manifests/deployment.yaml
        imagePullSecrets: 'acrpullapp1'
        overrides: |
          spec:
            template:
              spec:
                containers:
                - name: my-app-container
                  env:
                  - name: APP_ENV
                    value: "$(ENVIRONMENT)"
                  - name: LOG_LEVEL
                    value: "$(LOG_LEVEL)"
