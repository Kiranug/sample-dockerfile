trigger: none

parameters:
  - name: environment
    displayName: "Select Environment"
    type: string
    default: "dev"
    values:
      - dev
      - qa
      - uat
      - prod

variables:
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  APP_NAME: '$(Build.Repository.Name)'  # App name same as repo name
  manifestsPath: '$(Build.SourcesDirectory)/manifests/'
  IMAGE_REPOSITORY: '$(Build.Repository.Name)'
  K8S_SERVICE_ACCOUNT: 'devops-sa' # Ensure this service account exists in Kubernetes
  RESOURCE_GROUP: 'myResourceGroup'  # Update with your AKS resource group
  CLUSTER_NAME: 'myAKSCluster'  # Update with your AKS cluster name

stages:

- stage: BuildAndPush
  displayName: Build and Push Docker Image
  jobs:
  - job: Build
    displayName: Build and Push Docker Image to ACR
    pool: default
    steps:
    - task: Docker@2
      displayName: Build and Push Docker Image
      inputs:
        command: buildAndPush
        repository: $(CONTAINER_REGISTRY)/$(IMAGE_REPOSITORY)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Kubernetes Manifests'
      inputs:
        PathtoPublish: '$(manifestsPath)'
        ArtifactName: 'kube-manifest'
        publishLocation: 'Container'

- stage: DeployToAKS
  displayName: Deploy to AKS (${{ parameters.environment }})
  dependsOn: BuildAndPush
  jobs:
  - job: Deploy
    displayName: Deploy to AKS using Kubernetes Manifests
    pool: default
    steps:

    # Azure Login and Get AKS Credentials Using Service Connection
    - task: AzureCLI@2
      displayName: 'Login to Azure and Get AKS Credentials'
      inputs:
        azureSubscription: '$(AZURE_SERVICE_CONNECTION)'  # Using Azure Service Connection
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(CLUSTER_NAME) --overwrite-existing
          kubectl config current-context
          kubectl get nodes -o wide

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Kubernetes Manifests'
      inputs:
        artifactName: 'kube-manifest'
        downloadPath: '$(Build.SourcesDirectory)/manifests/'

    # Debugging Step: Ensure Variables Are Replaced in the Manifest
    - script: |
        sed -i 's|$(APP_NAME)|$(Build.Repository.Name)|g' $(Build.SourcesDirectory)/manifests/deployment.yaml
        sed -i 's|$(APP_NAME)|$(Build.Repository.Name)|g' $(Build.SourcesDirectory)/manifests/service.yaml
        echo "=== Debug: Deployment YAML ==="
        cat $(Build.SourcesDirectory)/manifests/deployment.yaml
      displayName: 'Replace Variables in Manifest & Debug'

    # Debugging Step: Verify Kubernetes Permissions
    - script: |
        kubectl auth can-i get deployments --namespace=${{ parameters.environment }} --as=system:serviceaccount:default:$(K8S_SERVICE_ACCOUNT)
      displayName: 'Check Kubernetes Permissions'

    - task: KubernetesManifest@1
      displayName: Deploy to AKS
      inputs:
        action: 'deploy'
        connectionType: 'kubernetesServiceConnection'
        kubernetesServiceConnection: $(K8S_SERVICE_CONNECTION)
        namespace: "${{ parameters.environment }}"
        manifests: |
          $(Build.SourcesDirectory)/manifests/deployment.yaml
          $(Build.SourcesDirectory)/manifests/service.yaml
        imagePullSecrets: 'acrpull'
        containers: |
          $(APP_NAME)=$(CONTAINER_REGISTRY)/$(IMAGE_REPOSITORY):$(tag)
        valueFile: $(Build.SourcesDirectory)/manifests/values.yaml
