# build and deploy to aks and skil build if existing option is checked, user need to provide image name 
trigger: none
name: mypipelineskip-$(Build.SourceBranchName)
parameters:
  - name: environment
    displayName: "Select Environment"
    type: string
    default: "dev"
    values:
      - dev
      - qa
      - uat
      - prod
      
  - name: APP_NAME
    displayName: Provide Appication Name
    default: "myappdevtest2"
    type: string 


  - name: useExistingImage
    displayName: "Do you want to use an existing image?"
    type: boolean
    default: false

  - name: existingImage
    displayName: "Provide the full image name (if using an existing image)"
    type: string
    default: "Provide image name if use an existing image is check "  # Empty default value makes it optional
    
variables:
  - ${{ if eq(parameters.environment, 'dev') }}:
      - group: dev-variables
      - name: dockerfilePath
        value: '$(Build.SourcesDirectory)/Dockerfile'
      - name: tag
        value: '$(Build.BuildId)'
      - name: APP_NAME
        value: '${{ parameters.APP_NAME }}'
      - name: FINAL_IMAGE
        value: '$(CONTAINER_REGISTRY).azurecr.io/$(IMAGE_REPOSITORY)${{ parameters.environment }}:$(tag)'
      - name: K8S_SERVICE_CONNECTION
        value: "myakscred"  # Dev environment AKS connection

  - ${{ if eq(parameters.environment, 'qa') }}:
      - group: QA-variables
      - name: dockerfilePath
        value: '$(Build.SourcesDirectory)/Dockerfile'
      - name: tag
        value: '$(Build.BuildId)'
      - name: APP_NAME
        value: '${{ parameters.APP_NAME }}'
      - name: FINAL_IMAGE
        value: '$(CONTAINER_REGISTRY).azurecr.io/$(IMAGE_REPOSITORY)${{ parameters.environment }}:$(tag)'
      - name: K8S_SERVICE_CONNECTION
        value: "myakscred"  # Dev environment AKS connection

  - ${{ if eq(parameters.environment, 'uat') }}:
      - group: uat-variables
      - name: dockerfilePath
        value: '$(Build.SourcesDirectory)/Dockerfile'
      - name: tag
        value: '$(Build.BuildId)'
      - name: APP_NAME
        value: '${{ parameters.APP_NAME }}'
      - name: FINAL_IMAGE
        value: '$(CONTAINER_REGISTRY).azurecr.io/$(IMAGE_REPOSITORY)${{ parameters.environment }}:$(tag)'
      - name: K8S_SERVICE_CONNECTION
        value: "myakscred"  # Dev environment AKS connection

  - ${{ if eq(parameters.environment, 'prod') }}:
      - group: prod-variables
      - name: dockerfilePath
        value: '$(Build.SourcesDirectory)/Dockerfile'
      - name: tag
        value: '$(Build.BuildId)'
      - name: APP_NAME
        value: '${{ parameters.APP_NAME }}'
      - name: FINAL_IMAGE
        value: '$(CONTAINER_REGISTRY).azurecr.io/$(IMAGE_REPOSITORY)${{ parameters.environment }}:$(tag)'
      - name: K8S_SERVICE_CONNECTION
        value: "myakscred"  # Dev environment AKS connection

stages:

- stage: BuildAndPush
  displayName: Build and Push Docker Image
  condition: eq(${{ parameters.useExistingImage }}, false)  # ðŸ›‘ Skip if using existing image
  pool: default
  jobs:
  - job: Build
    displayName: Build and Push Docker Image to ACR
    steps:
    - script: |
        echo "useExistingImage: ${{ parameters.useExistingImage }}"  # Debugging log
      displayName: 'Log useExistingImage Value'
    
    - task: AzureKeyVault@2
      displayName: 'Fetch Secrets from Azure Key Vault'
      inputs:
        azureSubscription: 'my-azure-service-connection'
        KeyVaultName: 'greenwashradarkeys'
        SecretsFilter: '*'  # Fetch all secrets dynamically

        RunAsPreJob: false
    - task: CmdLine@2
      displayName: Create file and set variable
      inputs: 
        script: |
          echo $(dbuser--kk) > secret.txt
          echo "##vso[task.setvariable variable=DBUSER;issecret=true;isOutput=true]$(dbuser--kk)"
          echo $(DBUSER)
      name: setSecret  # This is important for referencing later

    - task: CopyFiles@2
      displayName: Copy file
      inputs:
        Contents: secret.txt
        targetFolder: '$(Build.ArtifactStagingDirectory)'
        
      
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

    - script: |
        echo $(DBUSER)
        ls -lah '$(Build.ArtifactStagingDirectory)'
        cat $(Build.ArtifactStagingDirectory)/secret.txt
        echo $(DBUSER) # Display the contents of the file
      displayName: 'Write Secret to File and Display'
     
    - task: Docker@2
      displayName: Build and Push Docker Image
      inputs:
        command: buildAndPush
        repository: $(IMAGE_REPOSITORY)${{ parameters.environment }}
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)  # Now fetched from variable group
        tags: |
          $(tag)
        buildArguments: |
          ENVIRONMENT_TEST=$(DBUSER)  # Pass the variable


- stage: DeployToAKS
  dependsOn: BuildAndPush
  variables:
    DBUSER: $[ stageDependencies.BuildAndPush.Job.outputs['setSecret.DBUSER'] ] 
  displayName: Deploy to AKS (${{ parameters.environment }}) using $(K8S_SERVICE_CONNECTION)
  pool: default
  jobs:
  - job: Deploy
    displayName: Deploy to AKS
    steps:

    - script: |
        echo "Displaying Kubernetes Manifest File:"
        cat $(Build.SourcesDirectory)/manifests/appdeploy.yaml
      displayName: 'Cat Kubernetes Manifest File'
    
    - ${{ if eq(parameters.useExistingImage, true) }}:
      - script: |
          echo "Using Existing Image: ${{ parameters.existingImage }}"
          echo "##vso[task.setvariable variable=FINAL_IMAGE]${{ parameters.existingImage }}"
        displayName: 'Set Image Variable (Existing Image)'

    - ${{ if eq(parameters.useExistingImage, false) }}:
      - script: |
          echo "Using Newly Built Image: $(FINAL_IMAGE)"
          echo "##vso[task.setvariable variable=FINAL_IMAGE]$(FINAL_IMAGE)"
        displayName: 'Set Image Variable (New Build)'

    - script: |
        echo "Final Image: $(FINAL_IMAGE)"
        echo "Value from ACR for dbuser--kk is"
        echo $(DBUSER)
        DBUSERVALUE=$(DBUSER)
      displayName: 'Verify Image Name'

    - script: |
        sed -i "s,{{APP_NAME}},$(APP_NAME)," $(Build.SourcesDirectory)/manifests/appdeploy.yaml
        sed -i "s,{{FINAL_IMAGE}},$(FINAL_IMAGE)," $(Build.SourcesDirectory)/manifests/appdeploy.yaml
        sed -i "s,{{NAMESPACE}},$(NAMESPACE)," $(Build.SourcesDirectory)/manifests/namespace.yaml
      displayName: 'Replace placeholders in appdeploy.yaml'
    
    - script: |
        echo "Displaying Kubernetes Manifest File after image replaced:"
        cat $(Build.SourcesDirectory)/manifests/appdeploy.yaml
        ls -lah '$(Build.SourcesDirectory)'
        ls -lah '$(Build.SourcesDirectory)/manifests'
        cat $(Build.SourcesDirectory)/manifests/namespace.yaml

      displayName: 'Cat Kubernetes Manifest File'
    - task: KubernetesManifest@1
      inputs:
        kubernetesServiceConnection: $(K8S_SERVICE_CONNECTION)
        action: 'deploy'
        manifests: |
          $(Build.SourcesDirectory)/manifests/namespace.yaml
      displayName: 'Create NameSpace'

    - task: KubernetesManifest@1
      displayName: Deploy to AKS
      inputs:
        action: 'deploy'
        connectionType: 'kubernetesServiceConnection'
        kubernetesServiceConnection: $(K8S_SERVICE_CONNECTION)
        manifests: |
          $(Build.SourcesDirectory)/manifests/appdeploy.yaml
        containers: |
          $(FINAL_IMAGE)