trigger: none
name: mypipelineskip-$(Build.SourceBranchName)

parameters:
  - name: environment
    displayName: "Select Environment"
    type: string
    default: "dev"
    values:
      - dev
      - qa
      - uat
      - prod

  - name: APP_NAME
    displayName: "Provide Application Name"
    type: string
    default: "myappdevtest2"

  - name: useExistingImage
    displayName: "Do you want to use an existing image?"
    type: boolean
    default: false

  - name: existingImage
    displayName: "Provide the full image name (if using an existing image)"
    type: string
    default: ""

variables:
  - ${{ if eq(parameters.environment, 'dev') }}:
      - group: dev-variables
  - ${{ if eq(parameters.environment, 'qa') }}:
      - group: QA-variables
  - ${{ if eq(parameters.environment, 'uat') }}:
      - group: uat-variables
  - ${{ if eq(parameters.environment, 'prod') }}:
      - group: prod-variables

stages:
- stage: BuildAndPush
  displayName: "Build and Push Docker Image"
  condition: eq(${{ parameters.useExistingImage }}, false)
  pool: default
  jobs:
  - job: Build
    displayName: "Build and Push Docker Image to ACR"
    steps:
    - task: AzureKeyVault@2
      displayName: "Fetch Secrets from Azure Key Vault"
      inputs:
        azureSubscription: 'my-azure-service-connection'
        KeyVaultName: 'greenwashradarkeys'
        SecretsFilter: '*'
        RunAsPreJob: false

    - script: |
        echo "Fetching all secrets from Azure Key Vault..."
        SECRETS=$(printenv | grep "AZURE_KEYVAULT_" | awk -F= '{print $1}' | sed 's/AZURE_KEYVAULT_//g')
        SECRET_CMD="kubectl create secret generic azure-keyvault-secrets -n default"
        for secret in $SECRETS; do
          VALUE=$(printenv AZURE_KEYVAULT_$secret | base64 -w 0)
          SECRET_CMD="$SECRET_CMD --from-literal=$secret=$VALUE"
        done
        eval "$SECRET_CMD --dry-run=client -o yaml | kubectl apply -f -"
        echo "âœ… Kubernetes Secret 'azure-keyvault-secrets' updated successfully!"
      displayName: "Create Kubernetes Secret from Key Vault Secrets"

    - task: Docker@2
      displayName: "Build and Push Docker Image"
      inputs:
        command: buildAndPush
        repository: $(IMAGE_REPOSITORY)${{ parameters.environment }}
        dockerfile: $(Build.SourcesDirectory)/Dockerfile
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(Build.BuildId)

- stage: DeployToAKS
  displayName: "Deploy to AKS (${{ parameters.environment }})"
  pool: default
  jobs:
  - job: Deploy
    displayName: "Deploy to AKS"
    steps:
    - ${{ if eq(parameters.useExistingImage, true) }}:
      - script: |
          echo "Using Existing Image: ${{ parameters.existingImage }}"
          echo "##vso[task.setvariable variable=FINAL_IMAGE]${{ parameters.existingImage }}"
        displayName: "Set Image Variable (Existing Image)"
    
    - ${{ if eq(parameters.useExistingImage, false) }}:
      - script: |
          echo "Using Newly Built Image: $(FINAL_IMAGE)"
          echo "##vso[task.setvariable variable=FINAL_IMAGE]$(FINAL_IMAGE)"
        displayName: "Set Image Variable (New Build)"
    
    - script: |
        sed -i "s,{{APP_NAME}},$(APP_NAME)," $(Build.SourcesDirectory)/manifests/appdeploy.yaml
        sed -i "s,{{FINAL_IMAGE}},$(FINAL_IMAGE)," $(Build.SourcesDirectory)/manifests/appdeploy.yaml
      displayName: "Replace placeholders in appdeploy.yaml"
    
    - task: KubernetesManifest@1
      displayName: "Deploy to AKS"
      inputs:
        action: 'deploy'
        connectionType: 'kubernetesServiceConnection'
        kubernetesServiceConnection: $(K8S_SERVICE_CONNECTION)
        manifests: |
          $(Build.SourcesDirectory)/manifests/appdeploy.yaml
        containers: |
          $(FINAL_IMAGE)
