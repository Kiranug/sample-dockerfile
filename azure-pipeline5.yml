trigger: none
name: mypipelineskip-$(Build.SourceBranchName)

parameters:
  - name: environment
    displayName: "Select Environment"
    type: string
    default: "dev"
    values:
      - dev
      - qa
      - uat
      - prod

  - name: APP_NAME
    displayName: "Provide Application Name"
    default: "myappdevtest2"
    type: string

  - name: useExistingImage
    displayName: "Do you want to use an existing image?"
    type: boolean
    default: false

  - name: existingImage
    displayName: "Provide the full image name (if using an existing image)"
    type: string
    default: ""  # Empty default value makes it optional

variables:
  - group: ${{ parameters.environment }}-variables
  - name: dockerfilePath
    value: '$(Build.SourcesDirectory)/Dockerfile'
  - name: tag
    value: '$(Build.BuildId)'
  - name: APP_NAME
    value: '${{ parameters.APP_NAME }}'
  - name: FINAL_IMAGE
    value: '$(CONTAINER_REGISTRY).azurecr.io/$(IMAGE_REPOSITORY)${{ parameters.environment }}:$(tag)'
  - name: K8S_SERVICE_CONNECTION
    value: "myakscred"

stages:

- stage: Fetch_Secret_From_Azure_KeyVault
  displayName: "Fetch Secret from Azure Key Vault (${{ parameters.environment }})"
  pool: default
  dependsOn: []
  jobs:
  - job: FetchSecrets
    displayName: "Fetch Secret From Azure Key Vault"
    steps:
    - task: AzureCLI@2
      displayName: "Fetch Secret from Azure Key Vault"
      inputs:
        azureSubscription: "my-azure-service-connection"
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          KEYVAULT_NAME="greenwashradarkeys"
          SECRET_NAME="dbuser--kk"

          SECRET_VALUE=$(az keyvault secret show --name $SECRET_NAME --vault-name $KEYVAULT_NAME --query value -o tsv)

          echo "##vso[task.setvariable variable=MY_SECRET;issecret=true]$SECRET_VALUE"

- stage: BuildAndPush
  displayName: "Build and Push Docker Image"
  condition: eq(${{ parameters.useExistingImage }}, false)  # Skip if using existing image
  pool: default
  dependsOn: [Fetch_Secret_From_Azure_KeyVault]
  jobs:
  - job: Build
    displayName: "Build and Push Docker Image to ACR"
    steps:
    - task: Docker@2
      displayName: "Build and Push Docker Image"
      inputs:
        command: buildAndPush
        repository: $(IMAGE_REPOSITORY)${{ parameters.environment }}
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
        buildArguments: |
          ENVIRONMENT_TEST=$(environmenttest)

- stage: DeployToAKS
  displayName: "Deploy to AKS (${{ parameters.environment }})"
  pool: default
  dependsOn: [BuildAndPush]  # Ensure Build happens before Deploy
  jobs:
  - job: Deploy
    displayName: "Deploy to AKS"
    steps:

    - script: |
        echo "Displaying Kubernetes Manifest File:"
        cat $(Build.SourcesDirectory)/manifests/appdeploy.yaml
      displayName: "Show Kubernetes Manifest File"
    
    - ${{ if eq(parameters.useExistingImage, true) }}:
      - script: |
          echo "Using Existing Image: ${{ parameters.existingImage }}"
          echo "##vso[task.setvariable variable=FINAL_IMAGE]${{ parameters.existingImage }}"
        displayName: "Set Image Variable (Existing Image)"

    - ${{ if eq(parameters.useExistingImage, false) }}:
      - script: |
          echo "Using Newly Built Image: $(FINAL_IMAGE)"
          echo "##vso[task.setvariable variable=FINAL_IMAGE]$(FINAL_IMAGE)"
        displayName: "Set Image Variable (New Build)"

    - script: |
        echo "Final Image: $(FINAL_IMAGE)"
      displayName: "Verify Image Name"

    - script: |
        sed -i "s,{{APP_NAME}},$(APP_NAME)," $(Build.SourcesDirectory)/manifests/appdeploy.yaml
        sed -i "s,{{FINAL_IMAGE}},$(FINAL_IMAGE)," $(Build.SourcesDirectory)/manifests/appdeploy.yaml
      displayName: "Replace Placeholders in appdeploy.yaml"
    
    - script: |
        echo "Displaying Kubernetes Manifest File after image replaced:"
        cat $(Build.SourcesDirectory)/manifests/appdeploy.yaml
      displayName: "Show Updated Kubernetes Manifest"

    - task: KubernetesManifest@1
      displayName: "Deploy to AKS"
      inputs:
        action: "deploy"
        connectionType: "kubernetesServiceConnection"
        kubernetesServiceConnection: $(K8S_SERVICE_CONNECTION)
        manifests: |
          $(Build.SourcesDirectory)/manifests/appdeploy.yaml
        containers: |
          $(FINAL_IMAGE)